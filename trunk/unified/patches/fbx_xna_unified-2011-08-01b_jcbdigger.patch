Index: __init__.py
===================================================================
--- __init__.py	(revision 2207)
+++ __init__.py	(working copy)
@@ -126,7 +126,7 @@
 
     use_mesh_edges = BoolProperty(
             name="Include Edges",
-            description="Edges may not be necessary causes errors with XNA",
+            description="Edges may not be necessary causes import pipeline errors with XNA",
             default=False,
             )
     use_anim = BoolProperty(
@@ -153,16 +153,17 @@
             soft_min=1, soft_max=16,
             default=6.0,
             )
+    path_mode = path_reference_mode
+    use_rotate_workaround = BoolProperty(
+            name="Rotate Animation Fix",
+            description="Disable global rotation, for XNA compatibility",
+            default=False,
+            )
     xna_validate = BoolProperty(
             name="XNA Strict Options",
             description="Make sure options are compatible with Microsoft XNA",
             default=False,
             )
-    use_rotate_workaround = BoolProperty(
-            name="XNA Rotate Fix",
-            description="Disable global rotation, for XNA compatibility",
-            default=False,
-            )
     batch_mode = EnumProperty(
             name="Batch Mode",
             items=(('OFF', "Off", "Active scene to file"),
@@ -181,8 +182,6 @@
             options={'HIDDEN'},
             )
 
-    path_mode = path_reference_mode
-
     # Validate that the options are compatible with XNA (JCB)
     def _validate_xna_options(self):
         if not self.xna_validate:
@@ -195,13 +194,16 @@
             changed = True
             self.global_scale = 1.0
             self.mesh_smooth_type = 'OFF'
-        if self.ANIM_OPTIMIZE or self.use_mesh_edges:
+        if self.use_anim_optimize or self.use_mesh_edges:
             changed = True
-            self.ANIM_OPTIMIZE = False
+            self.use_anim_optimize = False
             self.use_mesh_edges = False
         if self.object_types & {'CAMERA', 'LAMP', 'EMPTY'}:
             changed = True
             self.object_types -= {'CAMERA', 'LAMP', 'EMPTY'}
+        if self.path_mode != 'STRIP':
+            changed = True
+            self.path_mode = 'STRIP'
         return changed
 
     @property
Index: export_fbx.py
===================================================================
--- export_fbx.py	(revision 2207)
+++ export_fbx.py	(working copy)
@@ -2482,51 +2482,44 @@
         # instead of tagging
         tagged_actions = []
 
+        # get the current action first so we can use it if we only export one action (JCB)
+        for my_arm in ob_arms:
+            if not blenActionDefault:
+                blenActionDefault = my_arm.blenAction
+        
         if use_anim_action_all:
+            # Export All actions
             tmp_actions = bpy.data.actions[:]
+        else:
+            if blenActionDefault:
+                # Export the current action (JCB)
+                tmp_actions.append(blenActionDefault)
 
-            # find which actions are compatible with the armatures
-            # blenActions is not yet initialized so do it now.
-            tmp_act_count = 0
-            for my_arm in ob_arms:
+        # We need the following even if exporting only the current action (JCB)
 
-                # get the default name
-                if not blenActionDefault:
-                    blenActionDefault = my_arm.blenAction
+        # find which actions are compatible with the armatures
+        for my_arm in ob_arms:
 
-                arm_bone_names = set([my_bone.blenName for my_bone in my_arm.fbxBones])
+            arm_bone_names = set([my_bone.blenName for my_bone in my_arm.fbxBones])
 
-                for action in tmp_actions:
+            for action in tmp_actions:
 
-                    action_chan_names = arm_bone_names.intersection(set([g.name for g in action.groups]))
+                action_chan_names = arm_bone_names.intersection(set([g.name for g in action.groups]))
 
-                    if action_chan_names:  # at least one channel matches.
-                        my_arm.blenActionList.append(action)
-                        tagged_actions.append(action.name)
-                        tmp_act_count += 1
+                if action_chan_names:  # at least one channel matches.
+                    my_arm.blenActionList.append(action)
+                    tagged_actions.append(action.name)
 
-                        # incase there is no actions applied to armatures
-                        action_lastcompat = action
-
-            if tmp_act_count:
-                # unlikely to ever happen but if no actions applied to armatures, just use the last compatible armature.
-                if not blenActionDefault:
-                    blenActionDefault = action_lastcompat
-
-        del action_lastcompat
-
-        tmp_actions.insert(0, None)  # None is the default action
-
         file.write('''
 ;Takes and animation section
 ;----------------------------------------------------
 
 Takes:  {''')
 
+        # It should be OK for the takes section to be empty if there are no actions (JCB)
+        
         if blenActionDefault:
             file.write('\n\tCurrent: "%s"' % sane_takename(blenActionDefault))
-        else:
-            file.write('\n\tCurrent: "Default Take"')
 
         for blenAction in tmp_actions:
             # we have tagged all actious that are used be selected armatures
@@ -2537,30 +2530,25 @@
                     print('\taction: "%s" has no armature using it, skipping' % blenAction.name)
                     continue
 
-            if blenAction is None:
-                # Warning, this only accounts for tmp_actions being [None]
-                file.write('\n\tTake: "Default Take" {')
-                act_start = start
-                act_end = end
+            # Use the action name for the take name and the take file name (JCB)
+            if blenAction == blenActionDefault:
+                # We have already used the name for the Current: name above so get that name (JCB)
+                take_name = sane_name_mapping_take[blenAction.name]
             else:
-                # use existing name
-                if blenAction == blenActionDefault:  # have we already got the name
-                    file.write('\n\tTake: "%s" {' % sane_name_mapping_take[blenAction.name])
-                else:
-                    file.write('\n\tTake: "%s" {' % sane_takename(blenAction))
+                take_name = sane_takename(blenAction)
 
-                act_start, act_end = blenAction.frame_range
-                act_start = int(act_start)
-                act_end = int(act_end)
+            act_start, act_end = blenAction.frame_range
+            act_start = int(act_start)
+            act_end = int(act_end)
 
-                # Set the action active
-                for my_arm in ob_arms:
-                    if my_arm.blenObject.animation_data and blenAction in my_arm.blenActionList:
-                        my_arm.blenObject.animation_data.action = blenAction
-                        # print('\t\tSetting Action!', blenAction)
-                # scene.update(1)
+            # Set the action active
+            for my_arm in ob_arms:
+                if my_arm.blenObject.animation_data and blenAction in my_arm.blenActionList:
+                    my_arm.blenObject.animation_data.action = blenAction
 
-            file.write('\n\t\tFileName: "Default_Take.tak"')  # ??? - not sure why this is needed
+            # Start the take (JCB)
+            file.write('\n\tTake: "%s" {' % take_name)
+            file.write('\n\t\tFileName: "%s.tak"' % take_name)
             file.write('\n\t\tLocalTime: %i,%i' % (fbx_time(act_start - 1), fbx_time(act_end - 1)))  # ??? - not sure why this is needed
             file.write('\n\t\tReferenceTime: %i,%i' % (fbx_time(act_start - 1), fbx_time(act_end - 1)))  # ??? - not sure why this is needed
 
