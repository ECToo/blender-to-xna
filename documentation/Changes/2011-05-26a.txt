Revision: 1967
          http://projects.blender.org/scm/viewvc.php?view=rev&root=bf-extensions&revision=1967
Author:   campbellbarton
Date:     2011-05-26 08:45:31 +0000 (Thu, 26 May 2011)
Log Message:
-----------
added axis settings to 3ds import/export

Modified Paths:
--------------
    trunk/py/scripts/addons/io_scene_3ds/__init__.py
    trunk/py/scripts/addons/io_scene_3ds/export_3ds.py
    trunk/py/scripts/addons/io_scene_3ds/import_3ds.py
    trunk/py/scripts/addons/io_scene_fbx/__init__.py
    trunk/py/scripts/addons/io_scene_fbx/export_fbx.py

Modified: trunk/py/scripts/addons/io_scene_3ds/__init__.py
===================================================================
--- trunk/py/scripts/addons/io_scene_3ds/__init__.py	2011-05-26 07:47:44 UTC (rev 1966)
+++ trunk/py/scripts/addons/io_scene_3ds/__init__.py	2011-05-26 08:45:31 UTC (rev 1967)
@@ -42,8 +42,8 @@
 
 
 import bpy
-from bpy.props import StringProperty, FloatProperty, BoolProperty -from bpy_extras.io_utils import ImportHelper, ExportHelper
+from bpy.props import StringProperty, FloatProperty, BoolProperty, 
+EnumProperty from bpy_extras.io_utils import ImportHelper, 
+ExportHelper, axis_conversion
 
 
 class Import3DS(bpy.types.Operator, ImportHelper):
@@ -58,11 +58,41 @@
     use_image_search = BoolProperty(name="Image Search", description="Search subdirectories for any assosiated images (Warning, may be slow)", default=True)
     use_apply_transform = BoolProperty(name="Apply Transform", description="Workaround for object transformations importing incorrectly", default=True)
 
+    global_axis_forward = EnumProperty(
+            name="Forward",
+            items=(('X', "X Forward", ""),
+                   ('Y', "Y Forward", ""),
+                   ('Z', "Z Forward", ""),
+                   ('-X', "-X Forward", ""),
+                   ('-Y', "-Y Forward", ""),
+                   ('-Z', "-Z Forward", ""),
+                   ),
+            default='Y',
+            )
+
+    global_axis_up = EnumProperty(
+            name="Up",
+            items=(('X', "X Up", ""),
+                   ('Y', "Y Up", ""),
+                   ('Z', "Z Up", ""),
+                   ('-X', "-X Up", ""),
+                   ('-Y', "-Y Up", ""),
+                   ('-Z', "-Z Up", ""),
+                   ),
+            default='Z',
+            )
+
     def execute(self, context):
         from . import import_3ds
-        return import_3ds.load(self, context, **self.as_keywords(ignore=("filter_glob",)))
 
+        keywords = self.as_keywords(ignore=("global_axis_forward", 
+ "global_axis_up", "filter_glob"))
 
+        global_matrix = axis_conversion(from_forward=self.global_axis_forward, from_up=self.global_axis_up).to_4x4()
+        keywords["global_matrix"] = global_matrix
+
+        return import_3ds.load(self, context, **keywords)
+
+
 class Export3DS(bpy.types.Operator, ExportHelper):
     '''Export to 3DS file format (.3ds)'''
     bl_idname = "export_scene.autodesk_3ds"
@@ -73,11 +103,40 @@
 
     use_selection = BoolProperty(name="Selection Only", description="Export selected objects only", default=False)
 
+    global_axis_forward = EnumProperty(
+            name="Forward",
+            items=(('X', "X Forward", ""),
+                   ('Y', "Y Forward", ""),
+                   ('Z', "Z Forward", ""),
+                   ('-X', "-X Forward", ""),
+                   ('-Y', "-Y Forward", ""),
+                   ('-Z', "-Z Forward", ""),
+                   ),
+            default='Y',
+            )
+
+    global_axis_up = EnumProperty(
+            name="Up",
+            items=(('X', "X Up", ""),
+                   ('Y', "Y Up", ""),
+                   ('Z', "Z Up", ""),
+                   ('-X', "-X Up", ""),
+                   ('-Y', "-Y Up", ""),
+                   ('-Z', "-Z Up", ""),
+                   ),
+            default='Z',
+            )
+
     def execute(self, context):
         from . import export_3ds
-        return export_3ds.save(self, context, **self.as_keywords(ignore=("check_existing", "filter_glob")))
 
+        keywords = self.as_keywords(ignore=("global_axis_forward", "global_axis_up", "filter_glob", "check_existing"))
+        global_matrix = axis_conversion(to_forward=self.global_axis_forward, to_up=self.global_axis_up).to_4x4()
+        keywords["global_matrix"] = global_matrix
 
+        return export_3ds.save(self, context, **keywords)
+
+
 # Add to a menu
 def menu_func_export(self, context):
     self.layout.operator(Export3DS.bl_idname, text="3D Studio (.3ds)")

Modified: trunk/py/scripts/addons/io_scene_3ds/export_3ds.py
===================================================================
--- trunk/py/scripts/addons/io_scene_3ds/export_3ds.py	2011-05-26 07:47:44 UTC (rev 1966)
+++ trunk/py/scripts/addons/io_scene_3ds/export_3ds.py	2011-05-26 08:45:31 UTC (rev 1967)
@@ -485,11 +485,8 @@
 
     else:
         material_chunk.add_subchunk(make_material_subchunk(MATAMBIENT, [a * material.ambient for a in material.diffuse_color]))
-# 		material_chunk.add_subchunk(make_material_subchunk(MATAMBIENT, [a*material.amb for a in material.rgbCol] ))
         material_chunk.add_subchunk(make_material_subchunk(MATDIFFUSE, material.diffuse_color))
-# 		material_chunk.add_subchunk(make_material_subchunk(MATDIFFUSE, material.rgbCol))
         material_chunk.add_subchunk(make_material_subchunk(MATSPECULAR, material.specular_color))
-# 		material_chunk.add_subchunk(make_material_subchunk(MATSPECULAR, material.specCol))
 
         images = get_material_images(material)  # can be None
         if image:
@@ -522,22 +519,15 @@
     If the mesh contains quads, they will be split into triangles.'''
     tri_list = []
     do_uv = len(mesh.uv_textures)
-# 	do_uv = mesh.faceUV
 
-# 	if not do_uv:
-# 		face_uv = None
-
     img = None
     for i, face in enumerate(mesh.faces):
         f_v = face.vertices
-# 		f_v = face.v
 
         uf = mesh.uv_textures.active.data[i] if do_uv else None
 
         if do_uv:
             f_uv = uf.uv
-            # f_uv =  (uf.uv1, uf.uv2, uf.uv3, uf.uv4) if face.vertices[3] else (uf.uv1, uf.uv2, uf.uv3)
-# 			f_uv = face.uv
             img = uf.image if uf else None
             if img is not None:
                 img = img.name
@@ -545,16 +535,13 @@
         # if f_v[3] == 0:
         if len(f_v) == 3:
             new_tri = tri_wrapper((f_v[0], f_v[1], f_v[2]), face.material_index, img)
-# 			new_tri = tri_wrapper((f_v[0].index, f_v[1].index, f_v[2].index), face.mat, img)
             if (do_uv):
                 new_tri.faceuvs = uv_key(f_uv[0]), uv_key(f_uv[1]), uv_key(f_uv[2])
             tri_list.append(new_tri)
 
         else:  # it's a quad
             new_tri = tri_wrapper((f_v[0], f_v[1], f_v[2]), face.material_index, img)
-# 			new_tri = tri_wrapper((f_v[0].index, f_v[1].index, f_v[2].index), face.mat, img)
             new_tri_2 = tri_wrapper((f_v[0], f_v[2], f_v[3]), face.material_index, img)
-# 			new_tri_2 = tri_wrapper((f_v[0].index, f_v[2].index, f_v[3].index), face.mat, img)
 
             if (do_uv):
                 new_tri.faceuvs = uv_key(f_uv[0]), uv_key(f_uv[1]), uv_key(f_uv[2]) @@ -887,11 +874,15 @@  """
 
 
-def save(operator, context, filepath="",
-          use_selection=True,
-          ):
+def save(operator,
+         context, filepath="",
+         use_selection=True,
+         global_matrix=None,
+         ):
 
     import bpy
+    import mathutils
+
     import time
     from bpy_extras.io_utils import create_derived_objects, free_derived_objects
 
@@ -901,6 +892,9 @@
     time1 = time.clock()
 #	Blender.Window.WaitCursor(1)
 
+    if global_matrix is None:
+        global_matrix = mathutils.Matrix()
+
     if bpy.ops.object.mode_set.poll():
         bpy.ops.object.mode_set(mode='OBJECT')
 
@@ -939,8 +933,6 @@
             continue
 
         for ob_derived, mat in derived:
-# 		for ob_derived, mat in getDerivedObjects(ob, False):
-
             if ob.type not in ('MESH', 'CURVE', 'SURFACE', 'FONT', 'META'):
                 continue
 
@@ -950,7 +942,7 @@
                 data = None
 
             if data:
-                data.transform(mat)
+                data.transform(global_matrix * mat)
 # 				data.transform(mat, recalc_normals=False)
                 mesh_objects.append((ob_derived, data))
                 mat_ls = data.materials @@ -965,7 +957,6 @@
                     for f, uf in zip(data.faces, data.uv_textures.active.data):
                         if mat_ls:
                             mat_index = f.material_index
-# 							mat_index = f.mat
                             if mat_index >= mat_ls_len:
                                 mat_index = f.mat = 0
                             mat = mat_ls[mat_index]

Modified: trunk/py/scripts/addons/io_scene_3ds/import_3ds.py
===================================================================
--- trunk/py/scripts/addons/io_scene_3ds/import_3ds.py	2011-05-26 07:47:44 UTC (rev 1966)
+++ trunk/py/scripts/addons/io_scene_3ds/import_3ds.py	2011-05-26 08:45:31 UTC (rev 1967)
@@ -339,18 +339,12 @@
         ob = bpy.data.objects.new(contextObName, bmesh)
         object_dictionary[contextObName] = ob
         SCN.objects.link(ob)
+        importedObjects.append(ob)
 
-        '''
-        if contextMatrix_tx:
-            ob.setMatrix(contextMatrix_tx)
-        '''
-
         if contextMatrix_rot:
             ob.matrix_local = contextMatrix_rot
             object_matrix[ob] = contextMatrix_rot.copy()
 
-        importedObjects.append(ob)
-
     #a spare chunk
     new_chunk = chunk()
     temp_chunk = chunk()
@@ -667,6 +661,7 @@
             if child is None:
                 child = bpy.data.objects.new(object_name, None)  # create an empty object
                 SCN.objects.link(child)
+                importedObjects.append(child)
 
             object_list.append(child)
             object_parent.append(hierarchy) @@ -779,7 +774,12 @@
             ob.data.transform(pivot_matrix)
 
 
-def load_3ds(filepath, context, IMPORT_CONSTRAIN_BOUNDS=10.0, IMAGE_SEARCH=True, APPLY_MATRIX=True):
+def load_3ds(filepath,
+             context,
+             IMPORT_CONSTRAIN_BOUNDS=10.0,
+             IMAGE_SEARCH=True,
+             APPLY_MATRIX=True,
+             global_matrix=None):
     global SCN
 
     # XXX
@@ -838,6 +838,13 @@
                 me = ob.data
                 me.transform(ob.matrix_local.inverted())
 
+    # print(importedObjects)
+    if global_matrix:
+        for ob in importedObjects:
+            if ob.parent is None:
+                ob.matrix_world = ob.matrix_world * global_matrix
+
+
     # Done DUMMYVERT
     """
     if IMPORT_AS_INSTANCE:
@@ -903,6 +910,21 @@
     file.close()
 
 
-def load(operator, context, filepath="", constrain_size=0.0, use_image_search=True, use_apply_transform=True):
-    load_3ds(filepath, context, IMPORT_CONSTRAIN_BOUNDS=constrain_size, IMAGE_SEARCH=use_image_search, APPLY_MATRIX=use_apply_transform)
+def load(operator,
+         context,
+         filepath="",
+         constrain_size=0.0,
+         use_image_search=True,

@@ Diff output truncated at 10240 characters. @@ _______________________________________________
Bf-extensions-cvs mailing list
Bf-extensions-cvs@blender.org
http://lists.blender.org/mailman/listinfo/bf-extensions-cvs

==================

Revision: 1968
          http://projects.blender.org/scm/viewvc.php?view=rev&root=bf-extensions&revision=1968
Author:   campbellbarton
Date:     2011-05-26 08:51:05 +0000 (Thu, 26 May 2011)
Log Message:
-----------
- 3ds now selects all objects on import
- fbx default use_selected to False

Modified Paths:
--------------
    trunk/py/scripts/addons/io_scene_3ds/import_3ds.py
    trunk/py/scripts/addons/io_scene_fbx/__init__.py

Modified: trunk/py/scripts/addons/io_scene_3ds/import_3ds.py
===================================================================
--- trunk/py/scripts/addons/io_scene_3ds/import_3ds.py	2011-05-26 08:45:31 UTC (rev 1967)
+++ trunk/py/scripts/addons/io_scene_3ds/import_3ds.py	2011-05-26 08:51:05 UTC (rev 1968)
@@ -788,6 +788,9 @@
 
     print("importing 3DS: %r..." % (filepath), end="")
 
+    if bpy.ops.object.select_all.poll():
+        bpy.ops.object.select_all(action='DESELECT')
+
     time1 = time.clock()
 # 	time1 = Blender.sys.time()
 
@@ -844,6 +847,8 @@
             if ob.parent is None:
                 ob.matrix_world = ob.matrix_world * global_matrix
 
+    for ob in importedObjects:
+        ob.select = True
 
     # Done DUMMYVERT
     """

Modified: trunk/py/scripts/addons/io_scene_fbx/__init__.py
===================================================================
--- trunk/py/scripts/addons/io_scene_fbx/__init__.py	2011-05-26 08:45:31 UTC (rev 1967)
+++ trunk/py/scripts/addons/io_scene_fbx/__init__.py	2011-05-26 08:51:05 UTC (rev 1968)
@@ -56,7 +56,7 @@
     # List of operator properties, the attributes will be assigned
     # to the class instance from the operator settings before calling.
 
-    use_selection = BoolProperty(name="Selected Objects", description="Export selected objects on visible layers", default=True)
+    use_selection = BoolProperty(name="Selected Objects", description="Export selected objects on visible layers", default=False)
 # 	EXP_OBS_SCENE = BoolProperty(name="Scene Objects", description="Export all objects in this scene", default=True)
     global_scale = FloatProperty(name="Scale", description="Scale all data, (Note! some imports dont support scaled armatures)", min=0.01, max=1000.0, soft_min=0.01, soft_max=1000.0, default=1.0)
 

_______________________________________________
Bf-extensions-cvs mailing list
Bf-extensions-cvs@blender.org
http://lists.blender.org/mailman/listinfo/bf-extensions-cvs

=========================

Revision: 1969
          http://projects.blender.org/scm/viewvc.php?view=rev&root=bf-extensions&revision=1969
Author:   campbellbarton
Date:     2011-05-26 08:57:11 +0000 (Thu, 26 May 2011)
Log Message:
-----------
rename axis conversion operators settings.

Modified Paths:
--------------
    trunk/py/scripts/addons/io_scene_3ds/__init__.py
    trunk/py/scripts/addons/io_scene_fbx/__init__.py
    trunk/py/scripts/addons/io_scene_obj/__init__.py
    trunk/py/scripts/addons/io_scene_x3d/__init__.py

Modified: trunk/py/scripts/addons/io_scene_3ds/__init__.py
===================================================================
--- trunk/py/scripts/addons/io_scene_3ds/__init__.py	2011-05-26 08:51:05 UTC (rev 1968)
+++ trunk/py/scripts/addons/io_scene_3ds/__init__.py	2011-05-26 08:57:11 UTC (rev 1969)
@@ -58,7 +58,7 @@
     use_image_search = BoolProperty(name="Image Search", description="Search subdirectories for any assosiated images (Warning, may be slow)", default=True)
     use_apply_transform = BoolProperty(name="Apply Transform", description="Workaround for object transformations importing incorrectly", default=True)
 
-    global_axis_forward = EnumProperty(
+    axis_forward = EnumProperty(
             name="Forward",
             items=(('X', "X Forward", ""),
                    ('Y', "Y Forward", ""), @@ -70,7 +70,7 @@
             default='Y',
             )
 
-    global_axis_up = EnumProperty(
+    axis_up = EnumProperty(
             name="Up",
             items=(('X', "X Up", ""),
                    ('Y', "Y Up", ""),
@@ -85,9 +85,9 @@
     def execute(self, context):
         from . import import_3ds
 
-        keywords = self.as_keywords(ignore=("global_axis_forward", "global_axis_up", "filter_glob"))
+        keywords = self.as_keywords(ignore=("axis_forward", "axis_up", 
+ "filter_glob"))
 
-        global_matrix = axis_conversion(from_forward=self.global_axis_forward, from_up=self.global_axis_up).to_4x4()
+        global_matrix = axis_conversion(from_forward=self.axis_forward, 
+ from_up=self.axis_up).to_4x4()
         keywords["global_matrix"] = global_matrix
 
         return import_3ds.load(self, context, **keywords) @@ -103,7 +103,7 @@
 
     use_selection = BoolProperty(name="Selection Only", description="Export selected objects only", default=False)
 
-    global_axis_forward = EnumProperty(
+    axis_forward = EnumProperty(
             name="Forward",
             items=(('X', "X Forward", ""),
                    ('Y', "Y Forward", ""), @@ -115,7 +115,7 @@
             default='Y',
             )
 
-    global_axis_up = EnumProperty(
+    axis_up = EnumProperty(
             name="Up",
             items=(('X', "X Up", ""),
                    ('Y', "Y Up", ""),
@@ -130,8 +130,8 @@
     def execute(self, context):
         from . import export_3ds
 
-        keywords = self.as_keywords(ignore=("global_axis_forward", "global_axis_up", "filter_glob", "check_existing"))
-        global_matrix = axis_conversion(to_forward=self.global_axis_forward, to_up=self.global_axis_up).to_4x4()
+        keywords = self.as_keywords(ignore=("axis_forward", "axis_up", "filter_glob", "check_existing"))
+        global_matrix = axis_conversion(to_forward=self.axis_forward, 
+ to_up=self.axis_up).to_4x4()
         keywords["global_matrix"] = global_matrix
 
         return export_3ds.save(self, context, **keywords)

Modified: trunk/py/scripts/addons/io_scene_fbx/__init__.py
===================================================================
--- trunk/py/scripts/addons/io_scene_fbx/__init__.py	2011-05-26 08:51:05 UTC (rev 1968)
+++ trunk/py/scripts/addons/io_scene_fbx/__init__.py	2011-05-26 08:57:11 UTC (rev 1969)
@@ -60,7 +60,7 @@
 # 	EXP_OBS_SCENE = BoolProperty(name="Scene Objects", description="Export all objects in this scene", default=True)
     global_scale = FloatProperty(name="Scale", description="Scale all data, (Note! some imports dont support scaled armatures)", min=0.01, max=1000.0, soft_min=0.01, soft_max=1000.0, default=1.0)
 
-    global_axis_forward = EnumProperty(
+    axis_forward = EnumProperty(
             name="Forward",
             items=(('X', "X Forward", ""),
                    ('Y', "Y Forward", ""), @@ -72,7 +72,7 @@
             default='Y',
             )
 
-    global_axis_up = EnumProperty(
+    axis_up = EnumProperty(
             name="Up",
             items=(('X', "X Up", ""),
                    ('Y', "Y Up", ""),
@@ -140,9 +140,9 @@
 
         global_matrix = Matrix()
         global_matrix[0][0] = global_matrix[1][1] = global_matrix[2][2] = self.global_scale
-        global_matrix = global_matrix * axis_conversion(to_forward=self.global_axis_forward, to_up=self.global_axis_up).to_4x4()
+        global_matrix = global_matrix * 
+ axis_conversion(to_forward=self.axis_forward, 
+ to_up=self.axis_up).to_4x4()
 
-        keywords = self.as_keywords(ignore=("global_axis_forward", "global_axis_up", "global_scale", "check_existing", "filter_glob"))
+        keywords = self.as_keywords(ignore=("axis_forward", "axis_up", 
+ "global_scale", "check_existing", "filter_glob"))
         keywords["global_matrix"] = global_matrix
 
         from . import export_fbx

Modified: trunk/py/scripts/addons/io_scene_obj/__init__.py
===================================================================
--- trunk/py/scripts/addons/io_scene_obj/__init__.py	2011-05-26 08:51:05 UTC (rev 1968)
+++ trunk/py/scripts/addons/io_scene_obj/__init__.py	2011-05-26 08:57:11 UTC (rev 1969)
@@ -74,7 +74,7 @@
             )
 
     global_clamp_size = FloatProperty(name="Clamp Scale", description="Clamp the size to this maximum (Zero to Disable)", min=0.0, max=1000.0, soft_min=0.0, soft_max=1000.0, default=0.0)
-    global_axis_forward = EnumProperty(
+    axis_forward = EnumProperty(
             name="Forward",
             items=(('X', "X Forward", ""),
                    ('Y', "Y Forward", ""), @@ -86,7 +86,7 @@
             default='-Z',
             )
 
-    global_axis_up = EnumProperty(
+    axis_up = EnumProperty(
             name="Up",
             items=(('X', "X Up", ""),
                    ('Y', "Y Up", ""),
@@ -112,9 +112,9 @@
         else:
             self.use_groups_as_vgroups = False
 
-        keywords = self.as_keywords(ignore=("global_axis_forward", "global_axis_up", "filter_glob", "split_mode"))
+        keywords = self.as_keywords(ignore=("axis_forward", "axis_up", 
+ "filter_glob", "split_mode"))
 
-        global_matrix = axis_conversion(from_forward=self.global_axis_forward, from_up=self.global_axis_up).to_4x4()
+        global_matrix = axis_conversion(from_forward=self.axis_forward, 
+ from_up=self.axis_up).to_4x4()
         keywords["global_matrix"] = global_matrix
 
         return import_obj.load(self, context, **keywords) @@ -142,8 +142,8 @@
 
         row = layout.split(percentage=0.67)
         row.prop(self, "global_clamp_size")
-        layout.prop(self, "global_axis_forward")
-        layout.prop(self, "global_axis_up")
+        layout.prop(self, "axis_forward")
+        layout.prop(self, "axis_up")
 
         layout.prop(self, "use_image_search")
 
@@ -188,7 +188,7 @@
 
     global_scale = FloatProperty(name="Scale", description="Scale all data, (Note! some imports dont support scaled armatures)", min=0.01, max=1000.0, soft_min=0.01, soft_max=1000.0, default=1.0)
 
-    global_axis_forward = EnumProperty(
+    axis_forward = EnumProperty(
             name="Forward",
             items=(('X', "X Forward", ""),
                    ('Y', "Y Forward", ""), @@ -200,7 +200,7 @@
             default='-Z',
             )
 
-    global_axis_up = EnumProperty(
+    axis_up = EnumProperty(
             name="Up",
             items=(('X', "X Up", ""),
                    ('Y', "Y Up", ""),
@@ -218,11 +218,11 @@
         from . import export_obj
 
         from mathutils import Matrix
-        keywords = self.as_keywords(ignore=("global_axis_forward", "global_axis_up", "global_scale", "check_existing", "filter_glob"))
+        keywords = self.as_keywords(ignore=("axis_forward", "axis_up", 
+ "global_scale", "check_existing", "filter_glob"))
 
         global_matrix = Matrix()
         global_matrix[0][0] = global_matrix[1][1] = global_matrix[2][2] = self.global_scale
-        global_matrix = global_matrix * axis_conversion(to_forward=self.global_axis_forward, to_up=self.global_axis_up).to_4x4()
+        global_matrix = global_matrix * 
+ axis_conversion(to_forward=self.axis_forward, 
+ to_up=self.axis_up).to_4x4()
         keywords["global_matrix"] = global_matrix
         return export_obj.save(self, context, **keywords)
 

Modified: trunk/py/scripts/addons/io_scene_x3d/__init__.py
===================================================================
--- trunk/py/scripts/addons/io_scene_x3d/__init__.py	2011-05-26 08:51:05 UTC (rev 1968)
+++ trunk/py/scripts/addons/io_scene_x3d/__init__.py	2011-05-26 08:57:11 UTC (rev 1969)
@@ -52,7 +52,7 @@
     filename_ext = ".x3d"
     filter_glob = StringProperty(default="*.x3d;*.wrl", options={'HIDDEN'})
 
-    global_axis_forward = EnumProperty(
+    axis_forward = EnumProperty(
             name="Forward",
             items=(('X', "X Forward", ""),
                    ('Y', "Y Forward", ""), @@ -64,7 +64,7 @@
             default='Z',
             )
 
-    global_axis_up = EnumProperty(
+    axis_up = EnumProperty(
             name="Up",
             items=(('X', "X Up", ""),
                    ('Y', "Y Up", ""),
@@ -79,8 +79,8 @@
     def execute(self, context):
         from . import import_x3d
 
-        keywords = self.as_keywords(ignore=("global_axis_forward", "global_axis_up", "filter_glob"))
-        global_matrix = axis_conversion(from_forward=self.global_axis_forward, from_up=self.global_axis_up).to_4x4()
+        keywords = self.as_keywords(ignore=("axis_forward", "axis_up", "filter_glob"))
+        global_matrix = axis_conversion(from_forward=self.axis_forward, 
+ from_up=self.axis_up).to_4x4()
         keywords["global_matrix"] = global_matrix
 
         return import_x3d.load(self, context, **keywords) @@ -99,7 +99,7 @@
     use_triangulate = BoolProperty(name="Triangulate", description="Triangulate quads.", default=False)
     use_compress = BoolProperty(name="Compress", description="GZip the resulting file, requires a full python install", default=False)
 
-    global_axis_forward = EnumProperty(
+    axis_forward = EnumProperty(
             name="Forward",
             items=(('X', "X Forward", ""),
                    ('Y', "Y Forward", ""), @@ -111,7 +111,7 @@
             default='Z',
             )
 
-    global_axis_up = EnumProperty(
+    axis_up = EnumProperty(
             name="Up",
             items=(('X', "X Up", ""),
                    ('Y', "Y Up", ""),
@@ -127,8 +127,8 @@
         from . import export_x3d
         from mathutils import Matrix
 
-        keywords = self.as_keywords(ignore=("global_axis_forward", "global_axis_up", "check_existing", "filter_glob"))

@@ Diff output truncated at 10240 characters. @@ _______________________________________________
Bf-extensions-cvs mailing list
Bf-extensions-cvs@blender.org
http://lists.blender.org/mailman/listinfo/bf-extensions-cvs


